{"version":3,"sources":["components/Header/index.js","components/Scoreboard/index.js","components/Container/index.js","components/ImgCard/index.js","App.js","index.js"],"names":["Header","react_default","a","createElement","class","Component","Scoreboard","props","className","id","gameOver","correct","score","highScore","Container","children","ImgCard","onClick","shuffle","src","url","alt","name","App","state","images","clicked","increaseScore","newScore","_this","setState","newHighScore","shuffleCards","copyArray","slice","shuffledArray","checkClicked","event","cardId","parseInt","target","idArray","includes","loseGame","push","winGameCheck","array","length","newGame","clickFunc","arr","temp","index","ctr","Math","floor","random","_this2","this","components_Header","components_Scoreboard","components_Container","map","image","components_ImgCard","key","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.5e4de026.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './style.css'\r\n\r\nclass Header extends Component {\r\n    render()\r\n    {\r\n        return (\r\n            <div class=\"jumbotron jumbotron-fluid\">\r\n                <div class=\"container\">\r\n                    <h1 class=\"display-4\">Memory Game</h1>\r\n                    <p class=\"lead\">Click Each Image Only Once to Win!</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction Scoreboard(props) {\r\n    // state- correct/incorrect, score, & high score\r\n    return (\r\n        <div className=\"d-flex mx-3\">\r\n            <span id=\"banner\">\r\n                {props.gameOver || (props.correct?\"Correct\":\"Incorrect-You Lose\")}\r\n            </span>\r\n            <hr/>\r\n            <span id=\"scoreCounters\">\r\n                Score: {props.score} High Score: {props.highScore}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scoreboard","import React from 'react';\r\n\r\nfunction Container(props) {\r\n        return (\r\n            <div className=\" container d-flex bg-primary\">\r\n                {props.children}\r\n            </div>\r\n        )\r\n} \r\n\r\nexport default Container","import React from 'react';\r\nimport './style.css'\r\n\r\nfunction ImgCard(props) {\r\n        return (\r\n            <div id={props.id} className=\"card bg-danger m-3\" onClick={props.shuffle}>\r\n                <img id={props.id} className=\"card-img-top\" src={props.url} alt={props.name}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default ImgCard","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Header from './components/Header';\nimport Scoreboard from './components/Scoreboard';\nimport Container from './components/Container';\nimport ImgCard from './components/ImgCard';\nimport images from './images.json'\n\nclass App extends Component {\n  // STATE\n  // set image state to json, score and high score to 0, correct to true\n  state = {\n    images,\n    score: 0,\n    highScore: 0,\n    correct: true,\n    clicked: [],\n    gameOver: null\n  }\n  // METHODS\n\n  // increment score count\n  increaseScore = () => {\n    let newScore = this.state.score + 1;\n    this.setState(\n      { score: newScore }\n    )\n  }\n\n  // set new high score when reached\n  newHighScore = () => {\n    if (this.state.score >= this.state.highScore) {\n      let newScore = this.state.score + 1;\n      this.setState(\n        { highScore: newScore }\n      )\n    }\n  }\n\n  // function for shuffling an array (from stack overflow)\n  shuffle(arr) {\n    // my note- this sets all these variable to equal each other\n    var ctr = arr.length, temp, index;\n\n    // While there are elements in the array\n    while (ctr > 0) {\n      // Pick a random index\n      index = Math.floor(Math.random() * ctr);\n      // Decrease ctr by 1\n      ctr--;\n      // And swap the last element with it\n      temp = arr[ctr];\n      arr[ctr] = arr[index];\n      arr[index] = temp;\n    }\n    return arr;\n  }\n\n  // function to shuffle image  cards\n  shuffleCards = () => {\n    // copy images array\n    const copyArray = images.slice(0);\n    // function for shuffling an array (from stack overflow)\n    let shuffledArray = this.shuffle(copyArray)\n\n    // set this.state.images to new shuffled array,\n    this.setState(\n      { images: shuffledArray }\n    );\n  }\n\n  // function to check if guess is correct\n  checkClicked = (event) => {\n    this.setState({\n      correct: true,\n      gameOver: null\n    })\n    const cardId = parseInt(event.target.id);\n    // copy of clicked array\n    const idArray = this.state.clicked.slice(0);\n    // if clicked card's id is in array of clicked cards\n    if (idArray.includes(cardId)) { this.loseGame() }\n    else {\n      this.increaseScore()\n      // update array of clicked items \n      idArray.push(cardId);\n      this.setState(\n        { clicked: idArray }\n      )\n      // check if player has won the game\n      this.winGameCheck(idArray)\n    }\n  };\n\n  winGameCheck = (array) => {\n    if (array.length === 4) {\n      this.setState({\n        gameOver: \"You Win!\"\n      });\n      this.newGame();\n    }\n  }\n  loseGame = () => {\n    this.setState({\n      correct: false\n    })\n    this.newGame()\n  }\n\n  // function bundling all game functions together\n  clickFunc = (event) => {\n    this.shuffleCards();\n    this.newHighScore();\n    this.checkClicked(event);\n  }\n\n  // reset states for new game\n  newGame = () => {\n    this.setState(\n      {\n        score: 0,\n        clicked: []\n      }\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Scoreboard\n          correct={this.state.correct}\n          gameOver={this.state.gameOver}\n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        <Container>\n          {/* maps images to jsx elements */}\n          {this.state.images.map(image => (\n            <ImgCard\n              key={image.id}\n              id={image.id}\n              name={image.name}\n              url={image.url}\n              shuffle={this.clickFunc}\n            />\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}